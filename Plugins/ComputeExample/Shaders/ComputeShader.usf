#include "/Engine/Private/Common.ush"

// Curl dat noise
#define F4 0.309016994374947451

float4 mod289(float4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}
float mod289(float x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}
float4 permute(float4 x)
{
    return mod289(((x * 34.0) + 1.0) * x);
}
float permute(float x)
{
    return mod289(((x * 34.0) + 1.0) * x);
}
float4 taylorInvSqrt(float4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}
float taylorInvSqrt(float r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

float4 grad4(float j, float4 ip)
{
    const float4 ones = float4(1.0, 1.0, 1.0, -1.0);
    float4 p, s;

    p.xyz = floor(frac(float3(j, j, j) * ip.xyz) * 7.0) * ip.z - 1.0;
    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);
    if (p.x < 0)
        s.x = 1;
    else
        s.x = 0;
    if (p.y < 0)
        s.y = 1;
    else
        s.y = 0;
    if (p.z < 0)
        s.z = 1;
    else
        s.z = 0;
    if (p.w < 0)
        s.w = 1;
    else
        s.w = 0;
    p.xyz = p.xyz + (s.xyz * 2.0 - 1.0) * s.www;

    return p;
}

float4 simplexNoiseDerivatives(float4 v)
{
    const float4 C = float4(0.138196601125011, // (5 - sqrt(5))/20  G4
                        0.276393202250021, // 2 * G4
                        0.414589803375032, // 3 * G4
                       -0.447213595499958); // -1 + 4 * G4

// First corner
    float4 i = floor(v + dot(v, float4(F4, F4, F4, F4)));
    float4 x0 = v - i + dot(i, C.xxxx);

// Other corners

// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)
    float4 i0;
    float3 isX = step(x0.yzw, x0.xxx);
    float3 isYZ = step(x0.zww, x0.yyz);
//  i0.x = dot( isX, float3( 1.0 ) );
    i0.x = isX.x + isX.y + isX.z;
    i0.yzw = 1.0 - isX;
//  i0.y += dot( isYZ.xy, float2( 1.0 ) );
    i0.y += isYZ.x + isYZ.y;
    i0.zw += 1.0 - isYZ.xy;
    i0.z += isYZ.z;
    i0.w += 1.0 - isYZ.z;

  // i0 now contains the unique values 0,1,2,3 in each channel
    float4 i3 = clamp(i0, 0.0, 1.0);
    float4 i2 = clamp(i0 - 1.0, 0.0, 1.0);
    float4 i1 = clamp(i0 - 2.0, 0.0, 1.0);

  //  x0 = x0 - 0.0 + 0.0 * C.xxxx
  //  x1 = x0 - i1  + 1.0 * C.xxxx
  //  x2 = x0 - i2  + 2.0 * C.xxxx
  //  x3 = x0 - i3  + 3.0 * C.xxxx
  //  x4 = x0 - 1.0 + 4.0 * C.xxxx
    float4 x1 = x0 - i1 + C.xxxx;
    float4 x2 = x0 - i2 + C.yyyy;
    float4 x3 = x0 - i3 + C.zzzz;
    float4 x4 = x0 + C.wwww;

// Permutations
    i = mod289(i);
    float j0 = permute(permute(permute(permute(i.w) + i.z) + i.y) + i.x);
    float4 j1 = permute(permute(permute(permute(
             i.w + float4(i1.w, i2.w, i3.w, 1.0))
           + i.z + float4(i1.z, i2.z, i3.z, 1.0))
           + i.y + float4(i1.y, i2.y, i3.y, 1.0))
           + i.x + float4(i1.x, i2.x, i3.x, 1.0));

// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope
// 7*7*6 = 294, which is close to the ring size 17*17 = 289.
    float4 ip = float4(1.0 / 294.0, 1.0 / 49.0, 1.0 / 7.0, 0.0);

    float4 p0 = grad4(j0, ip);
    float4 p1 = grad4(j1.x, ip);
    float4 p2 = grad4(j1.y, ip);
    float4 p3 = grad4(j1.z, ip);
    float4 p4 = grad4(j1.w, ip);

// Normalise gradients
    float4 norm = taylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;
    p4 *= taylorInvSqrt(dot(p4, p4));

// Mix contributions from the five corners
    float3 m0 = max(0.5 - float3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);
    float2 m1 = max(0.5 - float2(dot(x3, x3), dot(x4, x4)), 0.0);
    m0 = m0 * m0;
    m1 = m1 * m1;
    return 49.0 * (dot(m0 * m0, float3(dot(p0, x0), dot(p1, x1), dot(p2, x2)))
               + dot(m1 * m1, float2(dot(p3, x3), dot(p4, x4))));
}

float3 mod289(float3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float2 mod289(float2 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}
float3 permute(float3 x)
{
    return mod289(((x * 34.0) + 1.0) * x);
}

// orbit stuff

float rand(float2 co)
{
    float a = 12.9898;
    float b = 78.233;
    float c = 43758.5453;
    float dt = dot(co.xy, float2(a, b));
    float sn = fmod(dt, 3.14);
    return frac(sin(sn) * c);
}

float vecLen(float3 v)
{
    return sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
}

float3 normalize(float3 v)
{
    return v / vecLen(v);
}

float3 calcForceFor(float3 forcePoint, float3 pos)
{
	// Force:
    pos = (pos == forcePoint) ? (pos += float3(0.1, 0.1, 0.1)) : pos;
    float gauss = 10000.0;
    float e = 2.71828183;
    float k_weak = 1.0;
    float3 dir = forcePoint - pos.xyz;
    float g = pow(e, -pow(vecLen(dir), 2) / gauss);
    float3 f = normalize(dir) * k_weak * (1 + fmod(rand(dir.xy), 10) - fmod(rand(dir.yz), 10)) / 10.0 * g;
    return f;
}


/**
Uniform Buffers

BEGIN_UNIFORM_BUFFER_STRUCT(FComputeExampleConstantParameters, )
DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(float, Speed)
END_UNIFORM_BUFFER_STRUCT(FComputeExampleConstantParameters)

BEGIN_UNIFORM_BUFFER_STRUCT(FComputeExampleVariableParameters, )
DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(float, GlobalTime)
END_UNIFORM_BUFFER_STRUCT(FComputeExampleVariableParameters)

struct FBoid
{
	FVector4 Pos;
	FVector4 Vel;
};

*/

struct Boid
{
    float4 Pos;
    float4 Vel;
};

RWStructuredBuffer<Boid> BoidData;

const int OCTAVES = 3;

[numthreads(32, 1, 1)]
void MainComputeShader(uint3 ThreadId : SV_DispatchThreadID)
{
    uint id = ThreadId.x;

    Boid b = BoidData[id];

    float3 oldPosition = b.Pos.xyz;
    float3 noisePosition = oldPosition * CSVariables.NOISE_POSITION_SCALE;
    float noiseTime = CSVariables.GlobalTime * CSVariables.NOISE_TIME_SCALE;
    float4 xNoisePotentialDerivatives = float4(0.0, 0.0, 0.0, 0.0);
    float4 yNoisePotentialDerivatives = float4(0.0, 0.0, 0.0, 0.0);
    float4 zNoisePotentialDerivatives = float4(0.0, 0.0, 0.0, 0.0);
    float persistence = CSVariables.Turbulence;
    for (int i = 0; i < 3; ++i)
    {
        float scale = (1.0 / 2.0) * pow(2.0, float(i));
        float noiseScale = pow(persistence, float(i));
        if (persistence == 0.0 && i == 0)
        { //fix undefined behaviour
            noiseScale = 1.0;
        }
        float3 xNoi = noisePosition * pow(2.0, float(i));
        float3 yNoi = (noisePosition + float3(123.4, 129845.6, -1239.1)) * pow(2.0, float(i));
        float3 zNoi = (noisePosition + float3(-9519.0, 9051.0, -123.0)) * pow(2.0, float(i));

        xNoisePotentialDerivatives += simplexNoiseDerivatives(float4(xNoi.x, xNoi.y, xNoi.z, noiseTime)) * noiseScale * scale;
        yNoisePotentialDerivatives += simplexNoiseDerivatives(float4(yNoi.x, yNoi.y, yNoi.z, noiseTime)) * noiseScale * scale;
        zNoisePotentialDerivatives += simplexNoiseDerivatives(float4(zNoi.x, zNoi.y, zNoi.z, noiseTime)) * noiseScale * scale;
    }


    float3 noiseVelocity = CSVariables.NoiseMult * float3(zNoisePotentialDerivatives.y - yNoisePotentialDerivatives.z,
										xNoisePotentialDerivatives.z - zNoisePotentialDerivatives.x,
										yNoisePotentialDerivatives.x - xNoisePotentialDerivatives.y
										) * CSVariables.NOISE_SCALE;


    float3 forcePoint = float3(0., 0., 100.);

    float k_v = 1.5;

    float3 f = calcForceFor(forcePoint, b.Pos.xyz) + rand(b.Pos.xz) / 100.0;

    float3 orbitVel = normalize(b.Vel.xyz + (f * (CSVariables.GlobalTime / 1000.0))) * k_v;
    orbitVel += (forcePoint - b.Pos.xyz) * 0.00005;

    b.Vel.xyz = orbitVel;

    float3 totalVelocity = (b.Vel.xyz * 0.4) + noiseVelocity;
    float3 newPosition = oldPosition + totalVelocity /* * 0.2*/;

    b.Pos.xyz = newPosition;


    //b.Vel += float4(0.1f, 0.1f, 0.1f, 0.1f);
    //b.Pos.xyz += b.Vel.xyz * (b.Pos.w * 10.f);
    //b.Pos.y = 15.0 * float(id);

    BoidData[id] = b;
    
}